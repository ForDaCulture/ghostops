import streamlit as st
import json
import pandas as pd
from pathlib import Path

st.set_page_config(page_title="GhostOps Recon & HoneyGuard Dashboard", layout="wide")
st.title("üîç GhostOps Recon & HoneyGuard Dashboard")

# --- Section 1: Recon Report Viewer ---
st.header("1Ô∏è‚É£ Recon Report")
uploaded_report = st.file_uploader("Upload a GhostOps Recon JSON report", type="json")
if uploaded_report:
    report = json.load(uploaded_report)
    st.subheader("Domain Reconnaissance")
    st.json(report.get("domain_recon"))

    st.subheader("Open Ports & Services")
    ports = report.get("open_ports", [])
    st.table(ports if ports else "No open ports found")

    st.subheader("Web Technology Fingerprinting")
    for tech in report.get("web_tech", []):
        st.json(tech)

    st.subheader("Potential CVEs")
    cves = report.get("potential_cves", [])
    if cves:
        for c in cves:
            if isinstance(c, dict):
                st.markdown(f"**{c['id']}** ‚Äî {c['description']}")
            else:
                st.text(c)
    else:
        st.success("No known vulnerabilities detected.")

st.markdown("---")

# --- Section 2: HoneyGuard Anomaly Predictions ---
st.header("2Ô∏è‚É£ HoneyGuard Anomaly Predictions")
pred_file = st.file_uploader("Upload your `predictions.csv` (from classifier)", type="csv", key="preds")
if pred_file:
    df = pd.read_csv(pred_file)
    st.subheader("Raw Predictions")
    st.dataframe(df)

    # Highlight anomalies (label == -1)
    def highlight_anomaly(row):
        return ["background-color: salmon" if row.label == -1 else "" for _ in row]

    st.subheader("Labeled Sessions")
    st.dataframe(df.style.apply(highlight_anomaly, axis=1))

    # Summary stats
    total = len(df)
    anomalies = (df.label == -1).sum()
    st.markdown(f"**Total sessions:** {total}  \n**Anomalies detected:** {anomalies}")

    # Download filtered anomalies
    if anomalies:
        anomaly_df = df[df.label == -1]
        csv = anomaly_df.to_csv(index=False).encode()
        st.download_button("Download Anomalies CSV", data=csv, file_name="anomalies.csv")

else:
    st.info("Upload `predictions.csv` generated by `classifier.py predict` to see anomaly labels.")

st.markdown("---")
st.caption("Built with üêç Streamlit ‚Äî just `streamlit run dashboard/web_ui.py`")
